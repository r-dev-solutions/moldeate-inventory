Product Management API
=====================

This API allows you to manage products. Below is a summary of the available endpoints:

---

1. **POST /products**
   - **Description**: Add or update product stock.
   - **Request Body**:
     - Content-Type: `application/json`
     - Required Fields:
       ```json
       {
           "precio": "number",
           "codigo": "string",
           "descripcion": "string",
           "precio_cs": "number",
           "talla": "string",
           "stock": "number",
           "img_url1": "string",
           "img_url2": "string",
           "img_url3": "string",
           "img_url4": "string",
           "img_url5": "string"
       }
       ```
     - Example Request:
       ```json
       {
           "precio": 25.99,
           "codigo": "PROD123",
           "descripcion": "T-Shirt",
           "precio_cs": 20.99,
           "talla": "M",
           "stock": 10,
           "img_url1": "https://example.com/image1.jpg",
           "img_url2": "https://example.com/image2.jpg",
           "img_url3": "https://example.com/image3.jpg",
           "img_url4": "https://example.com/image4.jpg",
           "img_url5": "https://example.com/image5.jpg"
       }
       ```
   - **Response**:
     - Status Code: `200` (if product exists and is updated) or `201` (if product is created).
     - Content: The created or updated product as a JSON object.
     - Example Response:
       ```json
       {
           "_id": "64f1b2c3e4b0a1b2c3d4e5f6",
           "precio": 25.99,
           "codigo": "PROD123",
           "descripcion": "T-Shirt",
           "precio_cs": 20.99,
           "talla": "M",
           "stock": 10,
           "img_url1": "https://example.com/image1.jpg",
           "img_url2": "https://example.com/image2.jpg",
           "img_url3": "https://example.com/image3.jpg",
           "img_url4": "https://example.com/image4.jpg",
           "img_url5": "https://example.com/image5.jpg"
       }
       ```

---

2. **PUT /products/:codigo/:talla**
   - **Description**: Update product details or stock.
   - **Parameters**:
     - `codigo` (string): The product code.
     - `talla` (string): The product size.
   - **Request Body**:
     - Content-Type: `application/json`
     - Optional Fields (at least one field must be provided):
       ```json
       {
           "precio": "number",
           "descripcion": "string",
           "precio_cs": "number",
           "stock": "number",
           "img_url1": "string",
           "img_url2": "string",
           "img_url3": "string",
           "img_url4": "string",
           "img_url5": "string"
       }
       ```
     - Example Request:
       ```json
       {
           "precio": 29.99,
           "stock": 15
       }
       ```
   - **Response**:
     - Status Code: `200`
     - Content: The updated product as a JSON object.
     - Example Response:
       ```json
       {
           "_id": "64f1b2c3e4b0a1b2c3d4e5f6",
           "precio": 29.99,
           "codigo": "PROD123",
           "descripcion": "T-Shirt",
           "precio_cs": 20.99,
           "talla": "M",
           "stock": 15,
           "img_url1": "https://example.com/image1.jpg",
           "img_url2": "https://example.com/image2.jpg",
           "img_url3": "https://example.com/image3.jpg",
           "img_url4": "https://example.com/image4.jpg",
           "img_url5": "https://example.com/image5.jpg"
       }
       ```
     - If the product is not found:
       - Status Code: `404`
       - Content: `"Product not found"`

---

3. **GET /products**
   - **Description**: Retrieve all products.
   - **Response**:
     - Status Code: `200`
     - Content: A JSON array of product objects.
     - Example Response:
       ```json
       [
           {
               "_id": "64f1b2c3e4b0a1b2c3d4e5f6",
               "precio": 25.99,
               "codigo": "PROD123",
               "descripcion": "T-Shirt",
               "precio_cs": 20.99,
               "talla": "M",
               "stock": 10,
               "img_url1": "https://example.com/image1.jpg",
               "img_url2": "https://example.com/image2.jpg",
               "img_url3": "https://example.com/image3.jpg",
               "img_url4": "https://example.com/image4.jpg",
               "img_url5": "https://example.com/image5.jpg"
           }
       ]
       ```

---

4. **DELETE /products/:codigo**
   - **Description**: Remove a product by its code.
   - **Parameters**:
     - `codigo` (string): The product code.
   - **Response**:
     - Status Code: `204` (if product is deleted).
     - If the product is not found:
       - Status Code: `404`
       - Content: `"Product not found"`

---

Server Information
------------------
- **Local Server**: http://localhost:3001
- **Production Server**: https://moldeate-inventory.onrender.com/products

---

Notes:
- All endpoints return a `500` status code with an error message if an internal server error occurs.
- The `404` status code is returned if a product is not found (for `PUT` and `DELETE` endpoints).